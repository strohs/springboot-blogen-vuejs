
spring.datasource.url=jdbc:h2:mem:blogen
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.generate-unique-name=false
spring.datasource.name=blogen
spring.h2.console.enabled=true
spring.sql.init.platform=h2
# specify locations of h2 DB schema and data
spring.sql.init.data-locations=classpath:/db/data-h2.sql
spring.sql.init.schema-locations=classpath:/db/schema-h2.sql
# disable Hibernate automatic schema creation by setting ddl-auto=none
spring.jpa.hibernate.ddl-auto=none
#spring.jpa.defer-datasource-initialization=true



# relative url to directory in resources/static that contains avatar images
app.avatar.dir=/avatars

# number of threads to display, per page, on the userPosts.html page
blogen.posts.per.page=4

# number of post search results to display per page
blogen.search.results.per.page=5

# number of posts to display, per page, on the categories page
blogen.categories.per.page=5

# JSON Web Token expiration in seconds: 1800 = 30 minutes
app.jwtExpirationSec=1800

# rsa private key used to sign JWTs
jwt.private.key=classpath:app.key
# rsa public key used to decode and verify JWTs
jwt.public.key=classpath:app.pub


# rsa private key used to sign JWTs
#app.jwtPrivateKey=MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDO8kOT1lSolexQOyDKqA9ljzrCBAMtY7UFfSLuhe/zabU5oq76HbzYFLTcffSiO8DwO0go8srIdkl2miWeAuD/HuBG1dRxLgHA/FXcewfYWx6dsrdhUz7sk01OTUPG7hPiI0d+YMqGhprcn9QwCHKS6986fPAaHiy0livTy4c2k+4OGGyVUysSI4/Fb9FZH4DwolIxRvOpCl+knPJ6fQn/NyUdLyO+NewhtLmPB4vQOFHoiJTuf3CLMKV/XU/9k1RtT53MLpioTH2IouL/MtdIkT6Vjri9faire7kbwYDCNvfhYVVrRmJ48Cew220kbsj8js/fgJnAatVETEZDFnrnAgMBAAECggEAaxMUfgiWkwfHVpfRVqnwFXcvSrVyw2hkgCuICGwKhCI8n06aRFVgoVjNX4xYKBzMrj+uDWnaHDB/wDrvnbsVmUrrdhsrKUhJpgWpk0OhAoPa6nNOyK+ezh9FD2+Q0vvaE9Z3Jl+ESmiY9fBIhHXKelRKkuOUA597OBC/Kn2TP1wKCudYd727Z+Eko1dYFIHVR5zDpT2Ooc7gggSyKhbPvypt/f0D1K8p5j/Z00lQtPdL61v5JrimU9CRx7tdCTgEORT4HK1DV9s54UMdI1tkx4EliW4QHXqeDyFtLNMSlvYOD3jmA/rO4+nBos1pam5ohVdgLQPWiZ8H8FmyKVqLUQKBgQD5bBidKZDi+rTM4776pHFssYbN1XrhlRTHNrfshGVPXihB9n/L4n8XH703sPjYx80sK9s4uwVeX27vQZbhB6SSi3UV266RoCOJw3YooIMNe+GNRS2Du8Ltni8uoPvsHboMFMbId+6QNXQYcWIjE59CPrUc48KBOqlTjfcnGsOSXwKBgQDUZ2dbpZpCjZR9hvO5oiGY72vCjWOZl0IrN6BdnS5XY7s0xkDsgUUR7CSMOXWnTmNszd5Up11vVlZaENTHiyKmbGzoum1KBrqSPZVocgZX95lQtGhaOOdveYEGCOQ4ri1D0PXMlGSQ6o2CmCa3rgSGZ1zcwKECr35Rgzlu8vU0eQKBgCdyhi4NDeIoHoItHt5LNbkoFpblRYr55hBfwhUBF3jG/nz4PFwFlW4V0fpF3gWDDBsJUKGXSpETbNsgN3mdmNSog7sSRHi5qAU4ya5BPJjcV97c6wbjoj+sfe/U/CLqzKruekXoWe2q1pKrFAdSKiTy//fyuadwnKkfUdB4difnAoGAQlLHg2aCdKWg6FFraVunAgpAq89aemswzi3gdVrPTZpmqmP9gdwbpS0HfIG0qzle8mqWMfjQxCNBc34t8uEPQMg6ebE8zxCq0V9JeAOi13UI+ppau1FpcvWNxESiftBkcfidx/POMzIKXe0EqfY8k3tTE9tSa3RBDVLcbDiROIECgYAIzCFeoUQ9ZcEFtbvTgnvVUsNM8InGAOz7GIcGjN/atZHnxCml6LkO7aRvh2MGRPOmef6W2j4eETgdhAKo2/nfQLjU8KJHjEIfEzd6Gee5zYgStkfPsg5JCDrBjN0tF/vGmhGHKJbCAKm+G6SpkEuIR1gFjYYJIBq7RqMVxI6JsQ==
# rsa public key used to verify JWTs
#app.jwtPublicKey=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzvJDk9ZUqJXsUDsgyqgPZY86wgQDLWO1BX0i7oXv82m1OaKu+h282BS03H30ojvA8DtIKPLKyHZJdpolngLg/x7gRtXUcS4BwPxV3HsH2FsenbK3YVM+7JNNTk1Dxu4T4iNHfmDKhoaa3J/UMAhykuvfOnzwGh4stJYr08uHNpPuDhhslVMrEiOPxW/RWR+A8KJSMUbzqQpfpJzyen0J/zclHS8jvjXsIbS5jweL0DhR6IiU7n9wizClf11P/ZNUbU+dzC6YqEx9iKLi/zLXSJE+lY64vX2oq3u5G8GAwjb34WFVa0ZiePAnsNttJG7I/I7P34CZwGrVRExGQxZ65wIDAQAB

####    OAuth2 Client Creation with Github or Google
## Github - instructions to create an OAuth2 Client application are here: https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/
##      home page url does not matter - i used http://localhost:8080
##      Authorization callback URL is very important as Spring has a default (which could be overridden)
##           http://localhost:8080/login/oauth2/code/github
##      fill in the client-id and client-secret properties for Github
##
## Google - instructions to create Google Oauth2 application: https://developers.google.com/identity/protocols/OAuth2WebServer
##      follow that guide to create OAuth2 Authorization Credentials, make sure the Authorized redirect URL is set to:
##          http://localhost:8080/oauth2/authorization/google
##      fill in client-id and client-secret propertied for Google
##
## the default authorization URL to start the OAuth2 login process with Spring Security is:
#       http://localhost:8080/login/oauth2/code/github
#       http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.github.client-id=cf18ac18bd24c470f6a8
spring.security.oauth2.client.registration.github.client-secret=FILL-IN

spring.security.oauth2.client.registration.google.client-id=758319250229-109cviiveu85smkcmrndke600jp243ja.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=FILL-IN

# Blogen REST Api OpenAPI configs
springdoc.packagesToScan=com.blogen.api
springdoc.pathsToMatch=/api/**